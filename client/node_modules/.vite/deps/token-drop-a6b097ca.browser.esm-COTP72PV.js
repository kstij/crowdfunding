import {
  StandardErc20
} from "./chunk-P7NTF6X4.js";
import {
  AbiSchema,
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractInterceptor,
  ContractMetadata,
  ContractPlatformFee,
  ContractPrimarySale,
  ContractRoles,
  ContractWrapper,
  DropClaimConditions,
  DropErc20ContractSchema,
  GasCostEstimator,
  TOKEN_DROP_CONTRACT_ROLES,
  Transaction,
  _defineProperty,
  buildTransactionFunction,
  getRoleHash,
  require_bs58,
  require_dist,
  require_fast_deep_equal,
  resolveAddress
} from "./chunk-ZMLSMPOI.js";
import {
  require_browser_ponyfill
} from "./chunk-U3QWHMKJ.js";
import "./chunk-T3BXOSGT.js";
import {
  init_lib7 as init_lib
} from "./chunk-N4DDFLXZ.js";
import {
  lib_exports8 as lib_exports
} from "./chunk-G6XLYD65.js";
import "./chunk-Z5ONN35Q.js";
import {
  require_bn
} from "./chunk-R2EUP4JQ.js";
import {
  init_shim
} from "./chunk-TAEM2Y7A.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/sdk/dist/token-drop-a6b097ca.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_merkletreejs = __toESM(require_dist());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var import_bs58 = __toESM(require_bs58());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var TokenDrop = class extends StandardErc20 {
  constructor(network, address, storage) {
    var _this;
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    _this = this;
    _defineProperty(this, "abi", void 0);
    _defineProperty(this, "metadata", void 0);
    _defineProperty(this, "app", void 0);
    _defineProperty(this, "roles", void 0);
    _defineProperty(this, "encoder", void 0);
    _defineProperty(this, "estimator", void 0);
    _defineProperty(this, "sales", void 0);
    _defineProperty(this, "platformFees", void 0);
    _defineProperty(this, "events", void 0);
    _defineProperty(this, "claimConditions", void 0);
    _defineProperty(this, "interceptor", void 0);
    _defineProperty(this, "claim", buildTransactionFunction(async function(amount) {
      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return _this.claimTo.prepare(await _this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);
    }));
    _defineProperty(this, "claimTo", buildTransactionFunction(async function(destinationAddress, amount) {
      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      return _this.erc20.claimTo.prepare(destinationAddress, amount, {
        checkERC20Allowance
      });
    }));
    _defineProperty(this, "delegateTo", buildTransactionFunction(async (delegateeAddress) => {
      return Transaction.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "delegate",
        args: [await resolveAddress(delegateeAddress)]
      });
    }));
    _defineProperty(this, "burnTokens", buildTransactionFunction(async (amount) => {
      return this.erc20.burn.prepare(amount);
    }));
    _defineProperty(this, "burnFrom", buildTransactionFunction(async (holder, amount) => {
      return this.erc20.burnFrom.prepare(holder, amount);
    }));
    this.abi = AbiSchema.parse(abi || []);
    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);
  }
  async getVoteBalance() {
    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());
  }
  async getVoteBalanceOf(account) {
    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(await resolveAddress(account)));
  }
  async getDelegation() {
    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());
  }
  async getDelegationOf(account) {
    return await this.contractWrapper.readContract.delegates(await resolveAddress(account));
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash("transfer"), lib_exports.AddressZero);
    return !anyoneCanTransfer;
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
_defineProperty(TokenDrop, "contractRoles", TOKEN_DROP_CONTRACT_ROLES);
export {
  TokenDrop
};
//# sourceMappingURL=token-drop-a6b097ca.browser.esm-COTP72PV.js.map
