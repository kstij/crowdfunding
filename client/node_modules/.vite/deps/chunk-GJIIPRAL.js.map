{
  "version": 3,
  "sources": ["../../@thirdweb-dev/react/dist/TrustWallet-7b9bd79d.browser.esm.js"],
  "sourcesContent": ["import { TrustWallet, assertWindowEthereum } from '@thirdweb-dev/wallets';\nimport { useCreateWalletInstance, useWalletContext, useConnect } from '@thirdweb-dev/react-core';\nimport { useState, useRef, useEffect } from 'react';\nimport { S as ScanScreen, i as isMobile, C as ConnectingScreen, G as GetStartedScreen } from './headlessConnectUI-0dfa5bbe.browser.esm.js';\nimport { jsx } from 'react/jsx-runtime';\nimport './basic-7307bc92.browser.esm.js';\nimport '@emotion/react';\nimport '@emotion/styled';\nimport '@radix-ui/colors';\nimport 'detect-browser';\nimport 'react-qr-code';\nimport '@radix-ui/react-dialog';\nimport '@radix-ui/react-icons';\n\nconst TrustScan = _ref => {\n  let {\n    onBack,\n    onConnected,\n    onGetStarted,\n    walletConfig,\n    hideBackButton\n  } = _ref;\n  const createInstance = useCreateWalletInstance();\n  const [qrCodeUri, setQrCodeUri] = useState();\n  const {\n    setConnectedWallet,\n    chainToConnect,\n    setConnectionStatus\n  } = useWalletContext();\n  const scanStarted = useRef(false);\n  useEffect(() => {\n    if (scanStarted.current) {\n      return;\n    }\n    scanStarted.current = true;\n    const trust = createInstance(walletConfig);\n    setConnectionStatus(\"connecting\");\n    trust.connectWithQrCode({\n      chainId: chainToConnect?.chainId,\n      onQrCodeUri(uri) {\n        setQrCodeUri(uri);\n      },\n      onConnected() {\n        setConnectedWallet(trust);\n        onConnected();\n      }\n    });\n  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus]);\n  return /*#__PURE__*/jsx(ScanScreen, {\n    onBack: onBack,\n    onGetStarted: onGetStarted,\n    qrCodeUri: qrCodeUri,\n    walletName: walletConfig.meta.name,\n    walletIconURL: walletConfig.meta.iconURL,\n    hideBackButton: hideBackButton\n  });\n};\n\nconst TrustConnectUI = props => {\n  const [screen, setScreen] = useState(\"connecting\");\n  const {\n    walletConfig,\n    close\n  } = props;\n  const connect = useConnect();\n  const hideBackButton = props.supportedWallets.length === 1;\n  const {\n    goBack\n  } = props;\n  const connectPrompted = useRef(false);\n  useEffect(() => {\n    if (connectPrompted.current) {\n      return;\n    }\n    const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;\n\n    // if loading\n    (async () => {\n      if (isInstalled) {\n        try {\n          connectPrompted.current = true;\n          setScreen(\"connecting\");\n          await connect(walletConfig);\n          close();\n        } catch (e) {\n          goBack();\n        }\n      }\n\n      // if trust is not injected\n      else {\n        // on mobile, open trust app link\n        if (isMobile()) {\n          window.open(\"https://link.trustwallet.com\");\n        } else {\n          // on desktop, show the trust scan qr code\n          setScreen(\"scanning\");\n        }\n      }\n    })();\n  }, [walletConfig, close, connect, goBack]);\n  if (screen === \"connecting\") {\n    return /*#__PURE__*/jsx(ConnectingScreen, {\n      hideBackButton: hideBackButton,\n      onBack: props.goBack,\n      walletName: walletConfig.meta.name,\n      walletIconURL: walletConfig.meta.iconURL,\n      supportLink: \"https://community.trustwallet.com/c/helpcenter/8\"\n    });\n  }\n  if (screen === \"get-started\") {\n    return /*#__PURE__*/jsx(GetStartedScreen, {\n      walletIconURL: walletConfig.meta.iconURL,\n      walletName: walletConfig.meta.name,\n      chromeExtensionLink: walletConfig.meta.urls?.chrome,\n      googlePlayStoreLink: walletConfig.meta.urls?.android,\n      appleStoreLink: walletConfig.meta.urls?.ios,\n      onBack: () => {\n        setScreen(\"scanning\");\n      }\n    });\n  }\n  if (screen === \"scanning\") {\n    return /*#__PURE__*/jsx(TrustScan, {\n      hideBackButton: hideBackButton,\n      onBack: props.goBack,\n      onConnected: close,\n      onGetStarted: () => {\n        setScreen(\"get-started\");\n      },\n      walletConfig: walletConfig\n    });\n  }\n  return null;\n};\n\nconst trustWallet = options => {\n  return {\n    id: TrustWallet.id,\n    meta: TrustWallet.meta,\n    create: walletOptions => {\n      return new TrustWallet({\n        ...walletOptions,\n        projectId: options?.projectId,\n        qrcode: false\n      });\n    },\n    connectUI: TrustConnectUI,\n    isInstalled() {\n      if (assertWindowEthereum(globalThis.window)) {\n        return !!globalThis.window.ethereum.isTrust;\n      }\n      return false;\n    }\n  };\n};\n\nexport { trustWallet };\n"],
  "mappings": "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",
  "names": []
}
