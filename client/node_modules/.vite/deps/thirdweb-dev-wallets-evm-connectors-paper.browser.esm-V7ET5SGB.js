import {
  F
} from "./chunk-4IZD5GFV.js";
import {
  walletIds
} from "./chunk-IKPZVLDA.js";
import {
  Connector
} from "./chunk-D2PX7L43.js";
import {
  normalizeChainId
} from "./chunk-2WK7HZX2.js";
import {
  _classPrivateFieldGet,
  _classPrivateFieldInitSpec,
  _classPrivateFieldSet
} from "./chunk-LZKPV45C.js";
import {
  _defineProperty
} from "./chunk-ZFEAPFGY.js";
import {
  init_lib7 as init_lib,
  utils_exports
} from "./chunk-N4DDFLXZ.js";
import "./chunk-G6XLYD65.js";
import "./chunk-Z5ONN35Q.js";
import "./chunk-R2EUP4JQ.js";
import {
  init_shim
} from "./chunk-TAEM2Y7A.js";
import "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js
init_shim();
init_lib();
var _paper = /* @__PURE__ */ new WeakMap();
var _signer = /* @__PURE__ */ new WeakMap();
var PaperWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", walletIds.paper);
    _defineProperty(this, "name", "Paper Wallet");
    _defineProperty(this, "ready", true);
    _defineProperty(this, "user", null);
    _classPrivateFieldInitSpec(this, _paper, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "options", void 0);
    _classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "onAccountsChanged", async (accounts) => {
      if (accounts.length === 0) {
        await this.onDisconnect();
      } else {
        this.emit("change", {
          account: utils_exports.getAddress(accounts[0])
        });
      }
    });
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = this.options.chains.findIndex((c) => c.chainId === id) === -1;
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    _defineProperty(this, "onDisconnect", async () => {
      this.emit("disconnect");
    });
    this.options = options;
  }
  getPaperSDK() {
    if (!_classPrivateFieldGet(this, _paper)) {
      _classPrivateFieldSet(this, _paper, new Promise(async (resolve, reject) => {
        var _a;
        try {
          const {
            PaperEmbeddedWalletSdk
          } = await import("./dist-V7GTTAYB.js");
          resolve(new PaperEmbeddedWalletSdk({
            advancedOptions: {
              recoveryShareManagement: (_a = this.options.advancedOptions) == null ? void 0 : _a.recoveryShareManagement
            },
            clientId: this.options.clientId,
            chain: "Ethereum",
            styles: this.options.styles
          }));
        } catch (err) {
          reject(err);
        }
      }));
    }
    return _classPrivateFieldGet(this, _paper);
  }
  async connect(options) {
    const paperSDK = await this.getPaperSDK();
    if (!paperSDK) {
      throw new Error("Paper SDK not initialized");
    }
    let user = await paperSDK.getUser();
    switch (user.status) {
      case F.LOGGED_OUT: {
        let authResult;
        if (options == null ? void 0 : options.email) {
          authResult = await paperSDK.auth.loginWithPaperEmailOtp({
            email: options.email
          });
        } else {
          authResult = await paperSDK.auth.loginWithPaperModal();
        }
        this.user = authResult.user;
        break;
      }
      case F.LOGGED_IN_WALLET_INITIALIZED: {
        this.user = user;
        break;
      }
    }
    if (!this.user) {
      throw new Error("Error connecting User");
    }
    if (options == null ? void 0 : options.chainId) {
      this.switchChain(options.chainId);
    }
    this.setupListeners();
    return this.getAddress();
  }
  async disconnect() {
    const paper = await _classPrivateFieldGet(this, _paper);
    await (paper == null ? void 0 : paper.auth.logout());
    _classPrivateFieldSet(this, _signer, void 0);
    this.user = null;
  }
  async getAddress() {
    const signer = await this.getSigner();
    return signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch (e) {
      return false;
    }
  }
  async getProvider() {
    const signer = await this.getSigner();
    if (!signer.provider) {
      throw new Error("Provider not found");
    }
    return signer.provider;
  }
  async getSigner() {
    var _a;
    if (_classPrivateFieldGet(this, _signer)) {
      return _classPrivateFieldGet(this, _signer);
    }
    if (!this.user) {
      const paperSDK = await this.getPaperSDK();
      let user = await paperSDK.getUser();
      switch (user.status) {
        case F.LOGGED_IN_WALLET_INITIALIZED: {
          this.user = user;
          break;
        }
      }
    }
    const signer = await ((_a = this.user) == null ? void 0 : _a.wallet.getEthersJsSigner({
      rpcEndpoint: this.options.chain.rpc[0]
    }));
    if (!signer) {
      throw new Error("Signer not found");
    }
    _classPrivateFieldSet(this, _signer, signer);
    return signer;
  }
  async isAuthorized() {
    return false;
  }
  async switchChain(chainId) {
    var _a, _b;
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error("Chain not configured");
    }
    await ((_a = this.user) == null ? void 0 : _a.wallet.setChain({
      chain: "Ethereum"
    }));
    _classPrivateFieldSet(this, _signer, await ((_b = this.user) == null ? void 0 : _b.wallet.getEthersJsSigner({
      rpcEndpoint: chain.rpc[0]
    })));
    this.emit("change", {
      chain: {
        id: chainId,
        unsupported: false
      }
    });
  }
  async setupListeners() {
    const provider = await this.getProvider();
    if (provider.on) {
      provider.on("accountsChanged", this.onAccountsChanged);
      provider.on("chainChanged", this.onChainChanged);
      provider.on("disconnect", this.onDisconnect);
    }
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
  async getEmail() {
    await this.getProvider();
    if (!this.user) {
      throw new Error("No user found, Paper Wallet is not connected");
    }
    return this.user.authDetails.email;
  }
};
export {
  PaperWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-paper.browser.esm-V7ET5SGB.js.map
