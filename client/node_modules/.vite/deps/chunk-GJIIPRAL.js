import {
  ConnectingScreen,
  GetStartedScreen,
  ScanScreen,
  isMobile,
  require_lib
} from "./chunk-4HUW3IVL.js";
import {
  TrustWallet,
  useConnect,
  useCreateWalletInstance,
  useWalletContext
} from "./chunk-RYHC6EEQ.js";
import {
  assertWindowEthereum
} from "./chunk-IIJMXOJU.js";
import {
  require_jsx_runtime
} from "./chunk-JA35CLVH.js";
import {
  require_react
} from "./chunk-VAZDPHGE.js";
import {
  init_shim
} from "./chunk-TAEM2Y7A.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/react/dist/TrustWallet-7b9bd79d.browser.esm.js
init_shim();
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react_qr_code = __toESM(require_lib());
var TrustScan = (_ref) => {
  let {
    onBack,
    onConnected,
    onGetStarted,
    walletConfig,
    hideBackButton
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = (0, import_react.useState)();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const scanStarted = (0, import_react.useRef)(false);
  (0, import_react.useEffect)(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    const trust = createInstance(walletConfig);
    setConnectionStatus("connecting");
    trust.connectWithQrCode({
      chainId: chainToConnect == null ? void 0 : chainToConnect.chainId,
      onQrCodeUri(uri) {
        setQrCodeUri(uri);
      },
      onConnected() {
        setConnectedWallet(trust);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus]);
  return (0, import_jsx_runtime.jsx)(ScanScreen, {
    onBack,
    onGetStarted,
    qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    hideBackButton
  });
};
var TrustConnectUI = (props) => {
  var _a, _b, _c;
  const [screen, setScreen] = (0, import_react.useState)("connecting");
  const {
    walletConfig,
    close
  } = props;
  const connect = useConnect();
  const hideBackButton = props.supportedWallets.length === 1;
  const {
    goBack
  } = props;
  const connectPrompted = (0, import_react.useRef)(false);
  (0, import_react.useEffect)(() => {
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          goBack();
        }
      } else {
        if (isMobile()) {
          window.open("https://link.trustwallet.com");
        } else {
          setScreen("scanning");
        }
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return (0, import_jsx_runtime.jsx)(ConnectingScreen, {
      hideBackButton,
      onBack: props.goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: "https://community.trustwallet.com/c/helpcenter/8"
    });
  }
  if (screen === "get-started") {
    return (0, import_jsx_runtime.jsx)(GetStartedScreen, {
      walletIconURL: walletConfig.meta.iconURL,
      walletName: walletConfig.meta.name,
      chromeExtensionLink: (_a = walletConfig.meta.urls) == null ? void 0 : _a.chrome,
      googlePlayStoreLink: (_b = walletConfig.meta.urls) == null ? void 0 : _b.android,
      appleStoreLink: (_c = walletConfig.meta.urls) == null ? void 0 : _c.ios,
      onBack: () => {
        setScreen("scanning");
      }
    });
  }
  if (screen === "scanning") {
    return (0, import_jsx_runtime.jsx)(TrustScan, {
      hideBackButton,
      onBack: props.goBack,
      onConnected: close,
      onGetStarted: () => {
        setScreen("get-started");
      },
      walletConfig
    });
  }
  return null;
};
var trustWallet = (options) => {
  return {
    id: TrustWallet.id,
    meta: TrustWallet.meta,
    create: (walletOptions) => {
      return new TrustWallet({
        ...walletOptions,
        projectId: options == null ? void 0 : options.projectId,
        qrcode: false
      });
    },
    connectUI: TrustConnectUI,
    isInstalled() {
      if (assertWindowEthereum(globalThis.window)) {
        return !!globalThis.window.ethereum.isTrust;
      }
      return false;
    }
  };
};

export {
  trustWallet
};
//# sourceMappingURL=chunk-GJIIPRAL.js.map
