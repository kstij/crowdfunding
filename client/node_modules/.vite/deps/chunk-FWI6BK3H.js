import {
  InputSelectionUI
} from "./chunk-HVWQRD2H.js";
import {
  Flex,
  MagicLink,
  Spinner,
  useConnect
} from "./chunk-RYHC6EEQ.js";
import {
  require_jsx_runtime
} from "./chunk-JA35CLVH.js";
import {
  require_react
} from "./chunk-VAZDPHGE.js";
import {
  init_shim
} from "./chunk-TAEM2Y7A.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/react/dist/magicLink-73f0551b.browser.esm.js
init_shim();
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
function magicLink(config) {
  const selectUI = (props) => (0, import_jsx_runtime.jsx)(MagicSelectionUI, {
    ...props,
    emailLogin: config.emailLogin !== false,
    smsLogin: config.smsLogin !== false
  });
  return {
    id: MagicLink.id,
    meta: MagicLink.meta,
    create: (options) => new MagicLink({
      ...options,
      ...config
    }),
    connectUI(props) {
      return (0, import_jsx_runtime.jsx)(MagicConnectionUI, {
        ...props,
        type: config.type || "auth"
      });
    },
    selectUI: config.type === "connect" ? void 0 : selectUI,
    isInstalled() {
      return false;
    }
  };
}
var MagicSelectionUI = (props) => {
  const isEmailEnabled = props.emailLogin !== false;
  const isSMSEnabled = props.smsLogin !== false;
  let placeholder = "Enter your email or phone number";
  let type = "text";
  let emptyErrorMessage = "email or phone number is required";
  if (isEmailEnabled && !isSMSEnabled) {
    placeholder = "Enter your email address";
    emptyErrorMessage = "email address is required";
    type = "email";
  } else if (!isEmailEnabled && isSMSEnabled) {
    placeholder = "Enter your phone number";
    emptyErrorMessage = "phone number is required";
    type = "tel";
  }
  if (!isEmailEnabled && !isSMSEnabled) {
    throw new Error('MagicLink must have either "emailLogin" or "smsLogin" enabled');
  }
  return (0, import_jsx_runtime.jsx)(InputSelectionUI, {
    onSelect: props.onSelect,
    placeholder,
    name: "magic-input",
    type,
    emptyErrorMessage,
    errorMessage: (input) => {
      const isEmail = input.includes("@");
      const isPhone = Number.isInteger(Number(input[input.length - 1]));
      if (isEmail && isEmailEnabled) {
        const emailRegex = /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,})$/g;
        const isValidEmail = emailRegex.test(input.replace(/\+/g, ""));
        if (!isValidEmail) {
          return "Invalid email address";
        }
      } else if (isPhone && isSMSEnabled) {
        if (!input.startsWith("+")) {
          return "Phone number must start with a country code";
        }
      } else {
        if (isEmailEnabled && isSMSEnabled) {
          return "Invalid email address or phone number";
        }
        if (isEmailEnabled) {
          return "Invalid email address";
        }
        if (isSMSEnabled) {
          return "Invalid phone number";
        }
      }
    },
    supportedWallets: props.supportedWallets
  });
};
var MagicConnectionUI = (_ref) => {
  let {
    close,
    walletConfig,
    open,
    selectionData,
    supportedWallets,
    type
  } = _ref;
  const connectPrompted = (0, import_react.useRef)(false);
  const singleWallet = supportedWallets.length === 1;
  const connect = useConnect();
  (0, import_react.useEffect)(() => {
    if (connectPrompted.current) {
      return;
    }
    connectPrompted.current = true;
    const isEmail = selectionData ? selectionData.includes("@") : false;
    (async () => {
      close();
      try {
        await connect(walletConfig, type === "connect" ? {} : isEmail ? {
          email: selectionData
        } : {
          phoneNumber: selectionData
        });
      } catch (e) {
        if (!singleWallet) {
          open();
        }
        console.error(e);
      }
    })();
  }, [connect, selectionData, walletConfig, close, open, singleWallet, type]);
  return (0, import_jsx_runtime.jsx)(Flex, {
    justifyContent: "center",
    alignItems: "center",
    style: {
      minHeight: "250px"
    },
    children: (0, import_jsx_runtime.jsx)(Spinner, {
      size: "md",
      color: "primary"
    })
  });
};

export {
  magicLink
};
//# sourceMappingURL=chunk-FWI6BK3H.js.map
