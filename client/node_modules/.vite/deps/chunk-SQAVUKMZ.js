import {
  BackButton,
  ButtonLink,
  ConnectingScreen,
  HelperLink,
  Img,
  ModalDescription,
  ModalTitle,
  isMobile,
  require_lib
} from "./chunk-4HUW3IVL.js";
import {
  Flex,
  FrameWallet,
  Spacer,
  iconSize,
  useConnect
} from "./chunk-RYHC6EEQ.js";
import {
  assertWindowEthereum
} from "./chunk-IIJMXOJU.js";
import {
  require_jsx_runtime
} from "./chunk-JA35CLVH.js";
import {
  require_react
} from "./chunk-VAZDPHGE.js";
import {
  init_shim
} from "./chunk-TAEM2Y7A.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/react/dist/frameWallet-bcf3b446.browser.esm.js
init_shim();
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react_qr_code = __toESM(require_lib());
var FrameFailedConnect = (props) => {
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsx)(BackButton, {
      onClick: () => props.onBack()
    }), (0, import_jsx_runtime.jsx)(Spacer, {
      y: "lg"
    }), (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [(0, import_jsx_runtime.jsx)(ModalTitle, {
        children: "Failed to connect to Frame."
      }), (0, import_jsx_runtime.jsx)(Spacer, {
        y: "sm"
      }), (0, import_jsx_runtime.jsx)(ModalDescription, {
        children: "Make sure the desktop app is installed and running. You can download Frame from the link below. Make sure to refresh this page once Frame is running."
      })]
    }), (0, import_jsx_runtime.jsx)(Spacer, {
      y: "xl"
    }), (0, import_jsx_runtime.jsx)(Flex, {
      flexDirection: "column",
      gap: "xs",
      children: (0, import_jsx_runtime.jsxs)(ButtonLink, {
        onClick: () => {
          window.open("https://frame.sh", "_blank");
        },
        children: [(0, import_jsx_runtime.jsx)(Img, {
          width: iconSize.lg,
          height: iconSize.lg,
          src: props.walletIconURL
        }), (0, import_jsx_runtime.jsx)("span", {
          children: "Download Frame"
        })]
      })
    }), (0, import_jsx_runtime.jsx)(Spacer, {
      y: "xl"
    }), (0, import_jsx_runtime.jsx)(HelperLink, {
      target: "_blank",
      href: props.supportLink,
      children: "Still having troubles connecting?"
    })]
  });
};
var FrameConnectUI = (props) => {
  const [screen, setScreen] = (0, import_react.useState)("connecting");
  const connect = useConnect();
  const connectPrompted = (0, import_react.useRef)(false);
  const {
    walletConfig,
    close,
    goBack
  } = props;
  const downloadLink = "https://frame.sh";
  const supportLink = "https://docs.frame.sh";
  const hideBackButton = props.supportedWallets.length === 1;
  (0, import_react.useEffect)(() => {
    if (connectPrompted.current) {
      return;
    }
    (async () => {
      if (!isMobile()) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          setScreen("connect-failed");
        }
      } else if (isMobile()) {
        window.open(downloadLink);
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return (0, import_jsx_runtime.jsx)(ConnectingScreen, {
      hideBackButton,
      onBack: goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink
    });
  }
  if (screen === "connect-failed") {
    return (0, import_jsx_runtime.jsx)(FrameFailedConnect, {
      onBack: goBack,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink
    });
  }
  return null;
};
var frameWallet = () => ({
  id: FrameWallet.id,
  meta: {
    name: "Frame",
    iconURL: "https://frame.nyc3.digitaloceanspaces.com/bundle/home/favicon.8f0e1342.png",
    urls: {
      chrome: "https://chrome.google.com/webstore/detail/frame-companion/ldcoohedfbjoobcadoglnnmmfbdlmmhf",
      firefox: "https://addons.mozilla.org/en-US/firefox/addon/frame-extension"
    }
  },
  create(options) {
    return new FrameWallet(options);
  },
  connectUI: FrameConnectUI,
  isInstalled() {
    var _a, _b, _c;
    const window_ = globalThis == null ? void 0 : globalThis.window;
    if (assertWindowEthereum(window_)) {
      return ((_a = window_.ethereum) == null ? void 0 : _a.isFrame) || ((_c = (_b = window_.ethereum) == null ? void 0 : _b.providers) == null ? void 0 : _c.some((p) => p.isFrame)) || false;
    }
    return false;
  }
});

export {
  frameWallet
};
//# sourceMappingURL=chunk-SQAVUKMZ.js.map
