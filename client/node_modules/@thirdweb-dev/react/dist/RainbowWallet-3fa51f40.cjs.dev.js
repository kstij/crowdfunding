'use strict';

var wallets = require('@thirdweb-dev/wallets');
var reactCore = require('@thirdweb-dev/react-core');
var React = require('react');
var coinbaseWallet = require('./headlessConnectUI-6a1fc244.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
require('./basic-83d8d47b.cjs.dev.js');
require('@emotion/react');
require('@emotion/styled');
require('@radix-ui/colors');
require('detect-browser');
require('react-qr-code');
require('@radix-ui/react-dialog');
require('@radix-ui/react-icons');

const RainbowScan = _ref => {
  let {
    onBack,
    onConnected,
    onGetStarted,
    walletConfig,
    hideBackButton
  } = _ref;
  const createInstance = reactCore.useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = React.useState();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = reactCore.useWalletContext();
  const scanStarted = React.useRef(false);
  React.useEffect(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    const rainbow = createInstance(walletConfig);
    setConnectionStatus("connecting");
    rainbow.connectWithQrCode({
      chainId: chainToConnect?.chainId,
      onQrCodeUri(uri) {
        setQrCodeUri(uri);
      },
      onConnected() {
        setConnectedWallet(rainbow);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus]);
  return /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    hideBackButton: hideBackButton
  });
};

const RainbowConnectUI = props => {
  const [screen, setScreen] = React.useState("connecting");
  const {
    walletConfig,
    close
  } = props;
  const connect = reactCore.useConnect();
  const hideBackButton = props.supportedWallets.length === 1;
  const {
    goBack
  } = props;
  const connectPrompted = React.useRef(false);
  React.useEffect(() => {
    if (connectPrompted.current) {
      return;
    }

    // if loading
    (async () => {
      // on mobile, open rainbow app link
      if (coinbaseWallet.isMobile()) {
        window.open("https://rnbwapp.com");
      } else {
        // on desktop, show the rainbow scan qr code
        setScreen("scanning");
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.ConnectingScreen, {
      hideBackButton: hideBackButton,
      onBack: props.goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: "https://rainbow.me/"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.GetStartedScreen, {
      walletIconURL: walletConfig.meta.iconURL,
      walletName: walletConfig.meta.name,
      chromeExtensionLink: walletConfig.meta.urls?.chrome,
      googlePlayStoreLink: walletConfig.meta.urls?.android,
      appleStoreLink: walletConfig.meta.urls?.ios,
      onBack: () => {
        setScreen("scanning");
      }
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsxRuntime.jsx(RainbowScan, {
      onBack: props.goBack,
      onConnected: close,
      onGetStarted: () => {
        setScreen("get-started");
      },
      hideBackButton: hideBackButton,
      walletConfig: walletConfig
    });
  }
  return null;
};

const rainbowWallet = options => {
  return {
    id: "rainbow",
    meta: {
      name: "Rainbow Wallet",
      iconURL: "ipfs://QmSZn47p4DVVBfzvg9BAX2EqwnPxkT1YAE7rUnrtd9CybQ/rainbow-logo.png",
      urls: {
        android: "https://rnbwapp.com/e/Va41HWS6Oxb",
        ios: "https://rnbwapp.com/e/OeMdmkJ6Oxb"
      }
    },
    create: walletOptions => {
      return new wallets.WalletConnect({
        ...walletOptions,
        walletId: "rainbow",
        projectId: options?.projectId,
        qrcode: false
      });
    },
    connectUI: RainbowConnectUI,
    isInstalled() {
      return false;
    }
  };
};

exports.rainbowWallet = rainbowWallet;
